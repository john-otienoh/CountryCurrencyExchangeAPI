from PIL import Image, ImageDraw, ImageFont
from typing import List
from models import Country
from datetime import datetime
import os


class ImageGeneratorService:
    """Service for generating summary images"""

    IMAGE_WIDTH = 800
    IMAGE_HEIGHT = 600
    BACKGROUND_COLOR = (255, 255, 255)
    TEXT_COLOR = (0, 0, 0)
    HEADER_COLOR = (41, 128, 185)

    @staticmethod
    def generate_summary_image(
        total_countries: int,
        top_countries: List[Country],
        last_refreshed: datetime,
        output_path: str = "static/cache/summary.png",
    ):
        """
        Generate a summary image with country statistics

        Args:
            total_countries: Total number of countries
            top_countries: List of top 5 countries by GDP
            last_refreshed: Timestamp of last refresh
            output_path: Path to save the image
        """

        img = Image.new(
            "RGB",
            (ImageGeneratorService.IMAGE_WIDTH, ImageGeneratorService.IMAGE_HEIGHT),
            ImageGeneratorService.BACKGROUND_COLOR,
        )
        draw = ImageDraw.Draw(img)

        try:
            title_font = ImageFont.truetype(
                "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 36
            )
            header_font = ImageFont.truetype(
                "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 24
            )
            text_font = ImageFont.truetype(
                "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 18
            )
        except:
            title_font = ImageFont.load_default()
            header_font = ImageFont.load_default()
            text_font = ImageFont.load_default()

        y_position = 30

        draw.text(
            (ImageGeneratorService.IMAGE_WIDTH // 2, y_position),
            "Country Data Summary",
            fill=ImageGeneratorService.HEADER_COLOR,
            font=title_font,
            anchor="mt",
        )
        y_position += 70

        draw.text(
            (50, y_position),
            f"Total Countries: {total_countries}",
            fill=ImageGeneratorService.TEXT_COLOR,
            font=header_font,
        )
        y_position += 50

        refresh_time = (
            last_refreshed.strftime("%Y-%m-%d %H:%M:%S UTC")
            if last_refreshed
            else "Never"
        )
        draw.text(
            (50, y_position),
            f"Last Refreshed: {refresh_time}",
            fill=ImageGeneratorService.TEXT_COLOR,
            font=text_font,
        )
        y_position += 60

        draw.text(
            (50, y_position),
            "Top 5 Countries by Estimated GDP:",
            fill=ImageGeneratorService.HEADER_COLOR,
            font=header_font,
        )
        y_position += 40

        for i, country in enumerate(top_countries, 1):
            gdp_formatted = (
                f"{country.estimated_gdp:,.2f}" if country.estimated_gdp else "N/A"
            )
            country_text = f"{i}. {country.name} - ${gdp_formatted}"
            draw.text(
                (70, y_position),
                country_text,
                fill=ImageGeneratorService.TEXT_COLOR,
                font=text_font,
            )
            y_position += 35

        y_position = ImageGeneratorService.IMAGE_HEIGHT - 50
        draw.text(
            (ImageGeneratorService.IMAGE_WIDTH // 2, y_position),
            "Generated by Country Currency & Exchange API",
            fill=(128, 128, 128),
            font=text_font,
            anchor="mt",
        )

        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        img.save(output_path)
